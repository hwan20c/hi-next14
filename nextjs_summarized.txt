react는 라이브러리
라이브러리 
-> 코드에서 사용 되는 것(사용의 주체는 개발자) 
-> 개발자가 다운 받아서 사용하는 것

next는 프레임워크
프레임워크 
-> 코드를 사용하는 주체(개발자에겐 권한이 없다.) 
-> 프레임워크는 프로젝트의 틀(frame) 같은 걸 지정해주는 경우들이 대부분이다.
-> 코드를 올바른 위치에 넣으면 프레임워크가 동작하게 해준다.

---------------------------------------------------------------------------

next에서 특별한 파일명은

layout.~ 
page.~ 
not-found.~ 

등이 있다.

---------------------------------------------------------------------------

next는

app폴더 밑에 page.tsx or .jsx 파일이 있다면, 저절로 layout.tsx나 .jsx 파일을 만들어서 동작하게 해준다.
layout.~ 파일은 지워도 저절로 next가 자동 생성해준다.

page.tsx는 root segment라고 불린다.

next js는 폴더명으로 알아서 routing을 해준다.
예를들어 app밑에 about-us폴더를 만들고 그안에 page.tsx를 만들면
/about-us 주소로 접근이 가능하다.

폴더안에 폴더를 만들어서 그안에 또 page.tsx파일을 만들면 
폴더명대로 라우팅이 된다.
예를들어 about-us/company/sales 밑에 page.tsx를 만들면
주소접근시에 /about-us/company/sales로 접근이 가능해진다.


---------------------------------------------------------------------------
usePathname을 사용하기 위해서는 "use client"; 라는 글자를 .tsx파일 맨위에 올려줘야한다.

rendering -> react code를 브라우저가 이해할 수 있는 html로 바꾸는 것

react가 rendering하는 방식은 csr(client side rendring)이다. -> 브라우저가 rendering하는것 

csr의 단점 
1. 자바스크립트가 동작하고 나서 렌더링이 되는 문제
-> 자바스크립트가 대부분의 것을 다운로드 한 다음에 동작(화면이 보여지게)하게 된다. 
-> 랜더링이 될때까지 시간이 걸리기 때문에, 페이지를 호출할시 하얀화면(빈페이지)을 보고 시작하는 경우들이 대부분이다.
-> 자바스크립트를 비활성화 하면 렌더링 자체가 되지 않는다.
-> 통신이 잘 안 되는 지역에서는 렌더링이 될때까지 오래걸릴 가능성이 있다.

2. seo 검색 엔진 최적화
-> google같은 검색엔진에서 노출되기 원한다면 google은 html을 읽어서 검색엔진을 만들기 때문에 웹사이트가 노출되는 경우가 줄어들 가능성이 있다.(화면에 접근하지 않으면 하얀화면(빈페이지)를 나타내기 때문이다. -> 빈페이지를 접근하게 된다. -> 검색이 안됌.)

아무런 프레임 워크 없이 create-react-app으로 설치해 서버를 올린다면 csr가 되어 버린다.

반면에, 

next는 자동적으로 ssr(server side rendering)을 하게 끔 되어 있다.
-> 화면에 표시할 html을 javascript랑은 상관없이 먼저 보여줄 수 있다.
-> next.js 안에 모든 page의 컴포넌트들을 우선 server에서 rending하는 거다.
-> backend에서 먼저 올라간다.
-> 주의해야할점은 모든 컴포넌트에 대해서 발생한다는 점이다.
-> next.js에서 "use client"; 라는걸 썼다고, csr로 작동하는것이 아니다.

---------------------------------------------------------------------------

dehydrated는 탈수된 이라는 뜻이다. 그렇다면 hydrated는 반대의 수분이 가득찬 이라는 뜻을 갖는다.

hydration -> 유저가 최초 html을 보고 나서 부터의 일들을 뜻하는 말(단순 html을 React application으로 초기화 하는 작업)
-> html을 보고난 후부터 React가 로드되고, components가 로드되고 initialize가 된다.
-> 그러면 app은 react js app이 되어 버리는거다.

js를 비활성화 해서 하면 그냥 새로고침을 해서 anchors로 페이지로 이동하는거 처럼 보이지만, js를 활성화하면 새로고침이 아니라 그냥 페이지를 이동하는것처럼 보인다.
-> 이는 react가 hydrated된 것이다.
-> 처음에는 anchors 묶음 이였다가. react component로 변하면서 생기는 과정이다.(Link component가 활성화 되기 때문)


동작과정
-> 누군가가 /about-us 페이지로 접근하기 원하면 next 서버는 component를 dummy html로 요청해서 뿌려준다.
-> 이 사용자가 /about-us를 동작하는 즉시, 프레임워크(next.js)는 load를 시작한다.
-> 바로 html을 초기화 하면서 React application을 로드를 하는것이다.
-> 그러면 이제 achors 태그들이 react의 link태그의 동작으로 바뀌게 되고
-> 페이지 이동시에 새로고침 할 필요 없이 로드가 되는 것이다.


혹시 자바스크립트가 로드 되는데 굉장히 오래 걸리면, 일단은 기본적인 html의 동작으로 실행은 될 것이다.

----------------------------------------------------------------------------------------

"use client"

hydration과정은 프로젝트 내의 모든 components들에 대해서 발생되지는 않는다.
-> ssr을 모든 components에 대해서 발생하지만 말이다.
-> client에서 hydration가 되는 components들은 "use client"라는 키워드를 가진 components에서만 동작한다.
-> 이게 use client를 넣는 이유가 된다.
-> 언제 써야할지는 에러를 봐서 적용하면된다.(use client가 필요한 키워드들이 있다.)

"server components"
-> "use client"를 사용하지 않는 모든 것들에 대해서 말한다.


이렇게 나눠지는것은 page마다 js를 로드할 필요가 없게 하기 위해서이다.
필요한 곳에서만 로드할 수 있게 하는 것이 굉장히 좋은 방식이라 볼 수 있다.






